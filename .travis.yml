language: cpp
dist: focal
sudo: enabled

compiler:
  - gcc

addons:
  sonarcloud:
    organization: "durbin-164"
    token: ${SONAR_TOKEN}

env:
  - AF_VER=3.7.2

# matrix:
#   include:
#     # - name: CUDA 8
#     #   env:
#     #   - CUDA=8.0.61-1
#     #   - CUDA_SHORT=8.0
#     #   - UBUNTU_VERSION=ubuntu1604
#     #   dist: xenial
#     # - name: CUDA 9
#     #   env:
#     #   - CUDA=9.2.148-1
#     #   - CUDA_SHORT=9.2
#     #   - UBUNTU_VERSION=ubuntu1604
#     #   dist: xenial
#     - name: CUDA 10
#       env:
#       - CUDA=10.1.105-1
#       - CUDA_SHORT=10.1
#       - UBUNTU_VERSION=ubuntu2004
#       dist: focal

before_install:
  - wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-ubuntu1804.pin
  - sudo mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600
  - wget http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda-repo-ubuntu1804-10-2-local-10.2.89-440.33.01_1.0-1_amd64.deb
  - sudo dpkg -i cuda-repo-ubuntu1804-10-2-local-10.2.89-440.33.01_1.0-1_amd64.deb
  - sudo apt-key add /var/cuda-repo-10-2-local-10.2.89-440.33.01/7fa2af80.pub
  - sudo apt-get update
  - sudo apt-get -y install cuda


script:
  # - bash scripts/cuda_install.sh
  - sudo apt-get install libgtest-dev
  - sudo apt-get install -y python3-setuptools
  - sudo apt-get install python-dev


  #############################3
  - wget --quiet http://arrayfire.s3.amazonaws.com/3.7.2/ArrayFire-v3.7.2_Linux_x86_64.sh
  - chmod +x ./ArrayFire-v3.7.2_Linux_x86_64.sh

  - ./ArrayFire-v3.7.2_Linux_x86_64.sh --skip-license --exclude-subdir --prefix=/opt
            # rm /opt/lib64/libcu*.so*
            # rm /opt/lib64/libafcuda*.so*
  - rm ./ArrayFire-v3.7.2_Linux_x86_64.sh

  - sudo sh -c "echo /opt/arrayfire/lib64 >> /etc/ld.so.conf.d/arrayfire.conf"
  - sudo ldconfig


  ###############333333333333
  # We do this conditionally because it saves us some downloading if the
  # version is the same.
  
  - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;  
  - sudo apt clean
  - bash miniconda.sh -b -p $HOME/miniconda
  - source "$HOME/miniconda/etc/profile.d/conda.sh"
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  # Useful for debugging any issues with conda
  - conda info -a

  # Replace dep1 dep2 ... with your dependencies
  - conda create -q -n avenv python
  - conda activate avenv
  - bash scripts/requirements.sh


  # - make clean
  # Wraps the compilation with the Build Wrapper to generate configuration (used
  # later by the SonarQube Scanner) into the "bw-output" folder
  # - bash scripts/gcov_coverage.sh
  - build-wrapper-linux-x86-64 --out-dir bw-output bash scripts/gcov_coverage.sh
  
  # Execute some tests
  # - make test
  # And finally run the SonarQube analysis - read the "sonar-project.properties"
  # file to see the specific configuration
  - sonar-scanner

cache:
  directories:
    - '$HOME/.sonar/cache'